global
	tune.ssl.default-dh-param 1024
	# https://github.com/haproxytech/haproxy-lua-cors
	lua-load /usr/local/etc/haproxy/cors.lua
	# https://www.haproxy.com/blog/introduction-to-haproxy-logging/
	log stdout format raw daemon "${LOGLEVEL}"
	log stderr format raw daemon "${LOGLEVEL}"
	ssl-default-bind-options ssl-min-ver TLSv1.3

defaults
	default-server init-addr last,libc,none
	default-server inter 3s rise 2 fall 3
	log global
	mode http
	option contstats
	option dontlognull
	option forwardfor
	option httplog
	timeout client 63s
	timeout connect 5s
	timeout http-keep-alive 1s
	timeout http-request 63s
	timeout server 63s
	timeout tunnel 3600s

resolvers docker-bridge-resolver
	nameserver docker-resolver 127.0.0.11:53
	hold valid 0ms

http-errors balena-http-errors
	errorfile 400 /etc/haproxy/errors/400.http
	errorfile 401 /etc/haproxy/errors/401.http
	errorfile 403 /etc/haproxy/errors/403.http
	errorfile 404 /etc/haproxy/errors/404.http
	errorfile 500 /etc/haproxy/errors/500.http
	errorfile 502 /etc/haproxy/errors/502.http
	errorfile 503 /etc/haproxy/errors/503.http

userlist balena
	user balena insecure-password "${BALENA_DEVICE_UUID}"

listen haproxy-stats
	bind :::1936 v4v6 ssl crt "${CERT_CHAIN_PATH}" alpn h2,http/1.1
	stats auth "balena:${BALENA_DEVICE_UUID}"
	stats enable
	stats uri /metrics

frontend http
	bind :::80 v4v6
	default_backend nginx-backend
	errorfiles balena-http-errors
	http-request capture req.hdr(Host) len 253
	http-response lua.cors
	# https://www.haproxy.com/blog/haproxy-log-customization/
	log-format "%ci:%cp [%tr] %ft %b/%s %TR/%Tw/%Tc/%Tr/%Ta %ST %B %CC %CS %tsc %ac/%fc/%bc/%sc/%rc %sq/%bq %hr %hs %{+Q}r"

	acl nginx-dead nbsrv(nginx-backend) lt 1
	monitor-uri /health
	monitor fail if nginx-dead

frontend https
	bind :::443 v4v6 ssl crt "${CERT_CHAIN_PATH}" alpn h2,http/1.1
	default_backend nginx-backend
	errorfiles balena-http-errors
	http-request capture req.hdr(Host) len 253
	http-response lua.cors
	log-format "%ci:%cp [%tr] %ft %b/%s %TR/%Tw/%Tc/%Tr/%Ta %ST %B %CC %CS %tsc %ac/%fc/%bc/%sc/%rc %sq/%bq %hr %hs %{+Q}r"

	acl nginx-dead nbsrv(nginx-backend) lt 1
	monitor-uri /health
	monitor fail if nginx-dead

	acl host-ca-backend hdr_beg(host) -i "ca."
	# only allow CRL requests unauthenticated, protect everything else
	acl balena-ca-crl path -i -m beg /api/v1/cfssl/crl
	acl balena-ca-auth http_auth(balena)
	http-request auth realm balena-ca if host-ca-backend !balena-ca-auth !balena-ca-crl
	use_backend ca-backend if host-ca-backend

	acl host-ocsp-backend hdr_beg(host) -i "ocsp."
	use_backend ocsp-backend if host-ocsp-backend

backend nginx-backend
	server nginx nginx:80 resolvers docker-bridge-resolver resolve-prefer ipv4 check port 80

backend ca-backend
	balance roundrobin
	server cfssl-ca balena-ca:8888 resolvers docker-bridge-resolver resolve-prefer ipv4 check port 8888

backend ocsp-backend
	balance roundrobin
	server cfssl-ocsp balena-ca:8889 resolvers docker-bridge-resolver resolve-prefer ipv4 check port 8889
